AWSTemplateFormatVersion: "2010-09-09"

Description: 
  "We are creating a VPC with 2 public & 2 private subnets deployed in 2 AZ"

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "VPC Cidr and the Subnet Cidr"
        Parameters: 
          - CidrRange
          - SubnetPublic1
          - SubnetPublic2
          - SubnetPrivate1
          - SubnetPrivate2
      - 
        Label: 
          default: "AZ selection"
        Parameters: 
          - AZ1
          - AZ2

Parameters:
  MyVPCName:
    Type: String
    Description: "Please Provide the Name for the VPC"
  Environment:
    Type: String
    Description: "Please Provide the Name of the Environment where we are deploying the VPC"
    AllowedValues:
      - Dev
      - Stg
      - Prod
  CidrRange:
    Type: String
    Description: "Please Provide the CidrRange of the VPC ex: 10.1.0.0/16"
  SubnetPublic1:   
    Description: "Please Provide the CidrRange of the 1st PublicSubnet ex: 10.1.1.0/24"
    Type: String
  SubnetPublic2:
    Description: "Please Provide the CidrRange of the 2nd PublicSubnet ex: 10.1.1.0/24"
    Type: String
  SubnetPrivate1:
    Description: "Please Provide the CidrRange of the 1nd PrivateSubnet ex: 10.1.1.0/24"
    Type: String
  SubnetPrivate2:
    Description: "Please Provide the CidrRange of the 1nd PrivateSubnet ex: 10.1.1.0/24"
    Type: String
  AZ1:
    Type: "AWS::EC2::AvailabilityZone::Name"
    Description: "Please Provide the AZ1 name ex: us-east-1e"
  AZ2:
    Type: "AWS::EC2::AvailabilityZone::Name"
    Description: "Please Provide the AZ2 name ex: us-east-1f"
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref CidrRange
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: env
          Value: !Ref Environment
        - Key: Name
          Value: !Ref MyVPCName          
  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: env
          Value: !Ref Environment
        - Key: Name
          Value: !Join [ "_", [ !Ref MyVPCName, MyIG ] ]          
  InternetGWAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGW
      VpcId: !Ref MyVPC

  Private1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref SubnetPrivate1
      Tags: 
        - Key: Name
          Value: !Join [ "_", [ !Ref MyVPCName, Private1 ] ]  
      VpcId: !Ref MyVPC
  Private2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref SubnetPrivate2
      Tags: 
        - Key: Name
          Value: !Join [ "_", [ !Ref MyVPCName, Private2 ] ]  
      VpcId: !Ref MyVPC
  Public1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref SubnetPublic1
      Tags: 
        - Key: Name
          Value: !Join [ "_", [ !Ref MyVPCName, Public1 ] ]  
      VpcId: !Ref MyVPC
  Public2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref SubnetPublic2
      Tags: 
        - Key: Name
          Value: !Join [ "_", [ !Ref MyVPCName, Public2 ] ] 
      VpcId: !Ref MyVPC
  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATEIP.AllocationId
        SubnetId: !Ref Public2
        Tags:
        - Key: env
          Value: !Ref Environment
        # - Key: Name
        #   Value: !Join [ "_", [ !Ref MyVPCName, !GetAtt NAT.SubnetId ] ]
  NATEIP:
    Type: AWS::EC2::EIP
    Properties: 
      Tags: 
        - Key: env
          Value: !Ref Environment

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: env
        Value: !Ref Environment
      - Key: Name
        Value: !Join [ "_", [ !Ref MyVPCName, RouteTablePrivate ] ]  
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: env
        Value: !Ref Environment
      - Key: Name
        Value: !Join [ "_", [ !Ref MyVPCName, RouteTablePublic ] ] 
  RouteNAT:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref RouteTablePrivate 
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId: !Ref NAT
  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref RouteTablePublic
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGW
  RoutePublicAssosiation1: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref Public1
  RoutePublicAssosiation2: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref Public2
  RoutePrivateAssosiation1: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref Private1
  RoutePrivateAssosiation2: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref Private2
Outputs:
  VPCID:
    Value: !Ref MyVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  DefaultSG:
    Value: !GetAtt MyVPC.DefaultSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-VPC-DSG'
  PublicRtId:
    Value: !GetAtt RouteTablePublic.RouteTableId
    Export:
      Name: !Sub '${AWS::StackName}-Public-RT'
  PrivateRtId:
    Value: !GetAtt RouteTablePrivate.RouteTableId
    Export:
      Name: !Sub '${AWS::StackName}-Private-RT'
  PublicSubnetId1:
    Value: !GetAtt Public1.SubnetId
    Export:
      Name: !Sub '${AWS::StackName}-Public1-Subnet'
  PublicSubnetId2:
    Value: !GetAtt Public2.SubnetId
    Export:
      Name: !Sub '${AWS::StackName}-Public2-Subnet'
  PrivateSubnetId1:
    Value: !GetAtt Private1.SubnetId
    Export:
      Name: !Sub '${AWS::StackName}-Private1-Subnet'
  PrivateSubnetId2:
    Value: !GetAtt Private2.SubnetId
    Export:
      Name: !Sub '${AWS::StackName}-Private2-Subnet'
  PublicSubnetAZ1:
    Value: !GetAtt Public1.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-Public1-AZ'
  PublicSubnetAZ2:
    Value: !GetAtt Public2.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-Public2-AZ'
  PrivateSubnetAZ1:
    Value: !GetAtt Private1.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-Private1-AZ'
  PrivateSubnetAZ2:
    Value: !GetAtt Private2.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-Private2-AZ'